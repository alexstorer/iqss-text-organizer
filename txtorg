#!/usr/bin/python

import clint
import sys
import os
from textorganizer import add, config, select, view


def parseargs(grouped_args,configuration):
    
    if '-c' in grouped_args:
        if len(grouped_args['-c']) == 0:
            print '-c flag passed, but no CSV file given. Ignoring -c flag'
            use_csv = False
        elif len(grouped_args['-c']) > 1:
            print 'Only one CSV metadata file can be passed. Ignoring -c flag'
            use_csv = False
        else:
            use_csv = True
            csv_file = grouped_args['-c'][0]
    else:
        use_csv = False

    if '-a' in grouped_args:
        if len(grouped_args['-a']) == 0:
            print 'Add_files flag passed, but no files given. Ignoring -a flag'
            add_files = False
        else:
            if use_csv: print 'Only one adding mode (-a or -c) may be used at one time. Reverting to interactive mode'
            add_files = True
    else:
        add_files = False

    if add_files and use_csv:
        mainprompt(configuration)
    elif add_files:
        add.process_raw_files_interactive(grouped_args['-a'][:],configuration)
    elif use_csv:
        add.process_raw_files_with_metadata_file(csv_file,configuration)
    else:
        mainprompt(configuration)

def mainprompt(configuration):
    print "Welcome message."
    while True:
        #present user with a prompt, grab input, and convert to lowercase
        instr=raw_input("> ").lower()
        if instr == 'q' or instr == 'quit' or instr == 'exit':
            break
        elif instr.startswith('select '):
            selection = select.selection(instr[7:],configuration['dblocation'])
            print str(len(selection.selecteditems))+" files selected."
        elif instr.startswith('export '):
            selection.parseargs_export(instr[7:])
        elif instr.startswith('view '):
            viewdb = view.viewdb(instr[5:],configuration['dblocation'])
        elif instr.startswith('add '):
            #add.process_raw_files(FILENAMES,configuration['dblocation'])
            #need a good way to get a list of filenames from the interactive prompt
            print '\'add\' is not yet supported from the interactive prompt. Please use \'txtorg add [filename]\' from the shell.'
        else:
            print "Input not understood. Type 'h' or 'help' for help."

if __name__ == '__main__':
    programdir = os.path.join(os.path.dirname(__file__))
    configuration = config.get_and_check_config(os.path.join(programdir,"textorganizer.cnf"),programdir)
    configuration['programdir'] = programdir

    parseargs(clint.args.grouped,configuration)
